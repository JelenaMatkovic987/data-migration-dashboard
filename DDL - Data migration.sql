  CREATE TABLE "ERROR_LOG" 
   (	"LOG_ID" NUMBER, 
	"TIMESTAMP" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"RECORD_ID" NUMBER, 
	"ERROR_TYPE" VARCHAR2(50), 
	"ERROR_DESCRIPTION" VARCHAR2(200), 
	 PRIMARY KEY ("LOG_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MIGRATION_LOG" 
   (	"LOG_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"START_TIME" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"END_TIME" TIMESTAMP (6), 
	"RECORDS_PROCESSED" NUMBER, 
	"STATUS" VARCHAR2(50), 
	 PRIMARY KEY ("LOG_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MIGRATION_STATISTICS" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"STATISTIC_NAME" VARCHAR2(100), 
	"STATISTIC_VALUE" VARCHAR2(100), 
	"LOG_ID" NUMBER, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "TARGET_DATA" 
   (	"ID" NUMBER, 
	"FIRST_NAME" VARCHAR2(100), 
	"LAST_NAME" VARCHAR2(100), 
	"EMAIL" VARCHAR2(100), 
	"PHONE" VARCHAR2(20), 
	"ADDRESS" VARCHAR2(200), 
	"PRODUCT_ID" VARCHAR2(50), 
	"PRODUCT_NAME" VARCHAR2(100), 
	"CATEGORY" VARCHAR2(50), 
	"PRICE" NUMBER, 
	"STOCK_QUANTITY" NUMBER, 
	"TRANSACTION_ID" VARCHAR2(50), 
	"TRANSACTION_DATE" DATE, 
	"AMOUNT" NUMBER, 
	"UPLOADED_ID" NUMBER, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "UPLOADED_DATA" 
   (	"ID" NUMBER, 
	"FIRST_NAME" VARCHAR2(100), 
	"LAST_NAME" VARCHAR2(100), 
	"EMAIL" VARCHAR2(100), 
	"PHONE" VARCHAR2(20), 
	"ADDRESS" VARCHAR2(200), 
	"PRODUCT_ID" VARCHAR2(50), 
	"PRODUCT_NAME" VARCHAR2(100), 
	"CATEGORY" VARCHAR2(50), 
	"PRICE" NUMBER, 
	"STOCK_QUANTITY" NUMBER, 
	"TRANSACTION_ID" VARCHAR2(50), 
	"TRANSACTION_DATE" DATE, 
	"AMOUNT" NUMBER, 
	"VALIDATION_PASSED" CHAR(1) DEFAULT 'N', 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "ERROR_LOG" ADD CONSTRAINT "FK_ERROR_RECORD" FOREIGN KEY ("RECORD_ID")
	  REFERENCES "UPLOADED_DATA" ("ID") ENABLE;

  CREATE INDEX "IDX_ERROR_LOG_RECORD_ID" ON "ERROR_LOG" ("RECORD_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "ERROR_LOG_BIU" 
BEFORE INSERT ON ERROR_LOG
FOR EACH ROW
BEGIN
  IF :NEW.LOG_ID IS NULL THEN
    :NEW.LOG_ID := ERROR_LOG_SEQ.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "ERROR_LOG_BIU" ENABLE;

  CREATE INDEX "IDX_MIGRATION_LOG_STATUS" ON "MIGRATION_LOG" ("STATUS") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "MIGRATION_LOG_BIU" 
BEFORE INSERT ON migration_log
FOR EACH ROW
BEGIN
  IF :NEW.LOG_ID IS NULL THEN
    :NEW.LOG_ID := MIGRATION_LOG_SEQ.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "MIGRATION_LOG_BIU" ENABLE;

  ALTER TABLE "MIGRATION_STATISTICS" ADD CONSTRAINT "FK_MIGRATION_LOG" FOREIGN KEY ("LOG_ID")
	  REFERENCES "MIGRATION_LOG" ("LOG_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "MIGRATION_STATISTICS_BIU" 
BEFORE INSERT ON migration_statistics
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := migration_statistics_SEQ.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "MIGRATION_STATISTICS_BIU" ENABLE;

  ALTER TABLE "TARGET_DATA" ADD CONSTRAINT "FK_TARGET_UPLOADED" FOREIGN KEY ("UPLOADED_ID")
	  REFERENCES "UPLOADED_DATA" ("ID") ENABLE;

  CREATE INDEX "IDX_TARGET_DATA_UPLOADED_ID" ON "TARGET_DATA" ("UPLOADED_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "TARGET_DATA_BIU" 
BEFORE INSERT ON TARGET_data
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := target_data_seq.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "TARGET_DATA_BIU" ENABLE;

  CREATE INDEX "IDX_UPLOADED_DATA_VALIDATION_PASSED" ON "UPLOADED_DATA" ("VALIDATION_PASSED") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "UPLOADED_DATA_BIU" 
BEFORE INSERT ON UPLOADED_DATA
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := uploaded_data_seq.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "UPLOADED_DATA_BIU" ENABLE;

































  CREATE INDEX "IDX_ERROR_LOG_RECORD_ID" ON "ERROR_LOG" ("RECORD_ID") 
  ;

  CREATE INDEX "IDX_MIGRATION_LOG_STATUS" ON "MIGRATION_LOG" ("STATUS") 
  ;

  CREATE INDEX "IDX_TARGET_DATA_UPLOADED_ID" ON "TARGET_DATA" ("UPLOADED_ID") 
  ;

  CREATE INDEX "IDX_UPLOADED_DATA_VALIDATION_PASSED" ON "UPLOADED_DATA" ("VALIDATION_PASSED") 
  ;

  CREATE UNIQUE INDEX "SYS_C00173649142" ON "UPLOADED_DATA" ("ID") 
  ;

  CREATE UNIQUE INDEX "SYS_C00173649205" ON "TARGET_DATA" ("ID") 
  ;

  CREATE UNIQUE INDEX "SYS_C00173649441" ON "ERROR_LOG" ("LOG_ID") 
  ;

  CREATE UNIQUE INDEX "SYS_C00173761556" ON "MIGRATION_LOG" ("LOG_ID") 
  ;

  CREATE UNIQUE INDEX "SYS_C00173761663" ON "MIGRATION_STATISTICS" ("ID") 
  ;









































create or replace PROCEDURE calculate_migration_time IS
  v_start_time TIMESTAMP;
  v_end_time TIMESTAMP;
  v_duration INTERVAL DAY TO SECOND;
  v_records_processed NUMBER;
BEGIN
  -- Dohvati start_time i end_time iz tabele migration_log
  SELECT start_time, end_time, records_processed
  INTO v_start_time, v_end_time, v_records_processed
  FROM migration_log
  WHERE log_id = (SELECT MAX(log_id) FROM migration_log);

  -- Izračunaj trajanje migracije
  v_duration := v_end_time - v_start_time;

  -- Upis statistike u tabelu migration_statistics
  INSERT INTO migration_statistics (statistic_name, statistic_value)
  VALUES ('Migration Duration', TO_CHAR(v_duration));

  INSERT INTO migration_statistics (statistic_name, statistic_value)
  VALUES ('Records Processed', TO_CHAR(v_records_processed));
END;
/
create or replace PROCEDURE log_migration_end (p_records_processed NUMBER, p_status VARCHAR2) IS
  v_log_id NUMBER;
BEGIN
  -- Dohvati maksimalni log_id iz migration_log tabele
  SELECT MAX(log_id) INTO v_log_id FROM migration_log;

  -- Ažuriraj zapis u migration_log tabeli
  UPDATE migration_log
  SET end_time = CURRENT_TIMESTAMP,
      records_processed = p_records_processed,
      status = p_status
  WHERE log_id = v_log_id;
END;
/
create or replace PROCEDURE log_migration_start IS
BEGIN
  INSERT INTO migration_log (start_time, status)
  VALUES (CURRENT_TIMESTAMP, 'IN_PROGRESS');
END;
/
create or replace PROCEDURE migrate_data IS
BEGIN
  FOR rec IN (SELECT * FROM uploaded_data WHERE VALIDATION_PASSED = 'Y') LOOP
    INSERT INTO target_data (FIRST_NAME, LAST_NAME, EMAIL, PHONE, ADDRESS, PRODUCT_ID, PRODUCT_NAME, CATEGORY, PRICE, STOCK_QUANTITY, TRANSACTION_ID, TRANSACTION_DATE, AMOUNT, uploaded_id)
    VALUES (rec.FIRST_NAME, rec.LAST_NAME, rec.EMAIL, rec.PHONE, rec.ADDRESS, rec.PRODUCT_ID, rec.PRODUCT_NAME, rec.CATEGORY, rec.PRICE, rec.STOCK_QUANTITY, rec.TRANSACTION_ID, rec.TRANSACTION_DATE, rec.AMOUNT, rec.ID);
  END LOOP;
END;
/
create or replace PROCEDURE record_migration_statistics IS
  v_log_id NUMBER;
  v_start_time TIMESTAMP;
  v_end_time TIMESTAMP;
  v_duration INTERVAL DAY TO SECOND;
  v_records_processed NUMBER;
BEGIN
  -- Dohvati start_time, end_time i log_id iz tabele migration_log
  SELECT log_id, start_time, end_time, records_processed INTO v_log_id, v_start_time, v_end_time, v_records_processed
  FROM migration_log
  WHERE log_id = (SELECT MAX(log_id) FROM migration_log);

  -- Izračunaj trajanje migracije
  v_duration := v_end_time - v_start_time;

  -- Upis statistike u tabelu migration_statistics
  INSERT INTO migration_statistics (statistic_name, statistic_value, log_id)
  VALUES ('Migration Duration', TO_CHAR(v_duration), v_log_id);

  INSERT INTO migration_statistics (statistic_name, statistic_value, log_id)
  VALUES ('Records Processed', TO_CHAR(v_records_processed), v_log_id);
END;
/
create or replace PROCEDURE validate_uploaded_data IS
BEGIN
  FOR rec IN (SELECT * FROM uploaded_data) LOOP
    -- Pretpostavimo da je zapis prošao validaciju
    rec.VALIDATION_PASSED := 'Y';

    -- Provera nedostajućih vrednosti
    IF rec.FIRST_NAME IS NULL OR rec.LAST_NAME IS NULL THEN
      INSERT INTO error_log (RECORD_ID, ERROR_TYPE, ERROR_DESCRIPTION)
      VALUES (rec.ID, 'Missing Value', 'First Name or Last Name is missing');
      rec.VALIDATION_PASSED := 'N';
    END IF;

  -- Provera formata email adrese bez korišćenja regexp_like
    IF rec.EMAIL NOT LIKE '%@%.%' THEN
      INSERT INTO error_log (RECORD_ID, ERROR_TYPE, ERROR_DESCRIPTION)
      VALUES (rec.ID, 'Invalid Email', 'Email format is incorrect');
      rec.VALIDATION_PASSED := 'N';
    END IF;

    -- Provera formata email adrese
    IF INSTR(rec.EMAIL, '@') = 0 OR INSTR(rec.EMAIL, '.') = 0 THEN
      INSERT INTO error_log (RECORD_ID, ERROR_TYPE, ERROR_DESCRIPTION)
      VALUES (rec.ID, 'Invalid Email', 'Email format is incorrect');
      rec.VALIDATION_PASSED := 'N';
    END IF;

    -- Provera formata telefonskog broja
    IF NOT REGEXP_LIKE(rec.PHONE, '^[0-9]+$') THEN
      INSERT INTO error_log (RECORD_ID, ERROR_TYPE, ERROR_DESCRIPTION)
      VALUES (rec.ID, 'Invalid Phone Number', 'Phone number format is incorrect');
      rec.VALIDATION_PASSED := 'N';
    END IF;

    -- Provera negativnih vrednosti za AMOUNT
    IF rec.AMOUNT < 0 THEN
      INSERT INTO error_log (RECORD_ID, ERROR_TYPE, ERROR_DESCRIPTION)
      VALUES (rec.ID, 'Negative Amount', 'Amount cannot be negative');
      rec.VALIDATION_PASSED := 'N';
    END IF;

    -- Ažuriranje tabele sa statusom validacije
    UPDATE uploaded_data
    SET VALIDATION_PASSED = rec.VALIDATION_PASSED
    WHERE ID = rec.ID;
  END LOOP;
END;
/


















   CREATE SEQUENCE  "ERROR_LOG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 65 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "MIGRATION_LOG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 31 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "MIGRATION_STATISTICS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 31 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "TARGET_DATA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 43 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "UPLOADED_DATA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 74 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;




























create or replace TRIGGER "ERROR_LOG_BIU" 
BEFORE INSERT ON ERROR_LOG
FOR EACH ROW
BEGIN
  IF :NEW.LOG_ID IS NULL THEN
    :NEW.LOG_ID := ERROR_LOG_SEQ.NEXTVAL;
  END IF;
END;
/
create or replace TRIGGER migration_log_BIU
BEFORE INSERT ON migration_log
FOR EACH ROW
BEGIN
  IF :NEW.LOG_ID IS NULL THEN
    :NEW.LOG_ID := MIGRATION_LOG_SEQ.NEXTVAL;
  END IF;
END;
/
create or replace TRIGGER migration_statistics_BIU
BEFORE INSERT ON migration_statistics
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := migration_statistics_SEQ.NEXTVAL;
  END IF;
END;
/
create or replace TRIGGER "TARGET_DATA_BIU" 
BEFORE INSERT ON TARGET_data
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := target_data_seq.NEXTVAL;
  END IF;
END;
/
create or replace TRIGGER "UPLOADED_DATA_BIU" 
BEFORE INSERT ON UPLOADED_DATA
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := uploaded_data_seq.NEXTVAL;
  END IF;
END;
/

  CREATE OR REPLACE EDITIONABLE TRIGGER "ERROR_LOG_BIU" 
BEFORE INSERT ON ERROR_LOG
FOR EACH ROW
BEGIN
  IF :NEW.LOG_ID IS NULL THEN
    :NEW.LOG_ID := ERROR_LOG_SEQ.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "ERROR_LOG_BIU" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "MIGRATION_LOG_BIU" 
BEFORE INSERT ON migration_log
FOR EACH ROW
BEGIN
  IF :NEW.LOG_ID IS NULL THEN
    :NEW.LOG_ID := MIGRATION_LOG_SEQ.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "MIGRATION_LOG_BIU" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "MIGRATION_STATISTICS_BIU" 
BEFORE INSERT ON migration_statistics
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := migration_statistics_SEQ.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "MIGRATION_STATISTICS_BIU" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "TARGET_DATA_BIU" 
BEFORE INSERT ON TARGET_data
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := target_data_seq.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "TARGET_DATA_BIU" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "UPLOADED_DATA_BIU" 
BEFORE INSERT ON UPLOADED_DATA
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := uploaded_data_seq.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "UPLOADED_DATA_BIU" ENABLE;


































  CREATE INDEX "IDX_ERROR_LOG_RECORD_ID" ON "ERROR_LOG" ("RECORD_ID") 
  ;
  CREATE UNIQUE INDEX "SYS_C00173649441" ON "ERROR_LOG" ("LOG_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "ERROR_LOG_BIU" 
BEFORE INSERT ON ERROR_LOG
FOR EACH ROW
BEGIN
  IF :NEW.LOG_ID IS NULL THEN
    :NEW.LOG_ID := ERROR_LOG_SEQ.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "ERROR_LOG_BIU" ENABLE;

  CREATE INDEX "IDX_MIGRATION_LOG_STATUS" ON "MIGRATION_LOG" ("STATUS") 
  ;
  CREATE UNIQUE INDEX "SYS_C00173761556" ON "MIGRATION_LOG" ("LOG_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "MIGRATION_LOG_BIU" 
BEFORE INSERT ON migration_log
FOR EACH ROW
BEGIN
  IF :NEW.LOG_ID IS NULL THEN
    :NEW.LOG_ID := MIGRATION_LOG_SEQ.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "MIGRATION_LOG_BIU" ENABLE;

  CREATE UNIQUE INDEX "SYS_C00173761663" ON "MIGRATION_STATISTICS" ("ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "MIGRATION_STATISTICS_BIU" 
BEFORE INSERT ON migration_statistics
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := migration_statistics_SEQ.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "MIGRATION_STATISTICS_BIU" ENABLE;

  CREATE INDEX "IDX_TARGET_DATA_UPLOADED_ID" ON "TARGET_DATA" ("UPLOADED_ID") 
  ;
  CREATE UNIQUE INDEX "SYS_C00173649205" ON "TARGET_DATA" ("ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "TARGET_DATA_BIU" 
BEFORE INSERT ON TARGET_data
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := target_data_seq.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "TARGET_DATA_BIU" ENABLE;

  CREATE INDEX "IDX_UPLOADED_DATA_VALIDATION_PASSED" ON "UPLOADED_DATA" ("VALIDATION_PASSED") 
  ;
  CREATE UNIQUE INDEX "SYS_C00173649142" ON "UPLOADED_DATA" ("ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "UPLOADED_DATA_BIU" 
BEFORE INSERT ON UPLOADED_DATA
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := uploaded_data_seq.NEXTVAL;
  END IF;
END;
/
ALTER TRIGGER "UPLOADED_DATA_BIU" ENABLE;































































